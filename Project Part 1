#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Nathan Maupin
AERO 424-500
10/22/2023
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Planetary Constants - Earth
G = 6.67430e-11  # gravitational constant (m^3 kg^-1 s^-2)
M_earth = 5.972e24  # Earth mass (kg)
R_earth = 6371e3  # Earth radius (m)
r_orbit =  7000e3  # orbital radius (from the center of the Earth)
omega0 = np.sqrt(G * M_earth / r_orbit**3) 

# Satellite Parameters - Moments of Inertia
I11 = 4500  # kg-m^2
I22 = 6000  # kg-m^2
I33 = 7000  # kg-m^2

# Initial Orientation Parameters
psi, phi, theta = np.array([0.09, -0.07, 0.15])
omega_B_initial = np.array([-0.0008, 0.0006, 0.00085])
initial_conditions = np.array([psi, phi, theta, *omega_B_initial])


# Dynamics function for ODE solver
def satellte_angular_rates(t, y):
    phi, psi, theta, omega1, omega2, omega3 = y
    
    # Euler's equations of motion
    tau1 = 0  # Assuming no external torques for simplicity
    tau2 = 0
    tau3 = 0
    dot_omega1 = (tau1 - (I33 - I22) * omega2 * omega3) / I11
    dot_omega2 = (tau2 - (I11 - I33) * omega1 * omega3) / I22
    dot_omega3 = (tau3 - (I22 - I11) * omega1 * omega2) / I33
    
    # Angle rate equations
    dot_phi = (omega1 * np.sin(theta) + omega2 * np.cos(theta) - omega0 * np.sin(psi) * np.cos(phi)) / np.cos(psi)
    dot_psi = (omega1 * np.cos(theta) - omega2 * np.sin(theta)) + omega0 * np.sin(phi)
    dot_theta = (omega1 * np.sin(theta) + omega2 * np.cos(theta)) * np.tan(psi) - omega0 * np.cos(phi) / np.cos(psi) + omega3
    
    return [dot_phi, dot_psi, dot_theta, dot_omega1, dot_omega2, dot_omega3]


# Integrate dynamics over 3 orbits
T_orbit = 2 * np.pi / omega0  # Orbital period
T_orbit = (2 * np.pi*r_orbit) / np.sqrt((G*M_earth)/r_orbit)
time_span = (0, 3 * T_orbit)
solution = solve_ivp(satellte_angular_rates, time_span, initial_conditions, t_eval=np.linspace(*time_span, 1000))

""" Plot angles """
plt.figure(figsize=(12, 8))

plt.subplot(3, 1, 1)
plt.plot(solution.t / T_orbit, np.degrees(solution.y[0]), label='Roll ($\phi$)')
plt.ylabel('Angle (degrees)')
plt.legend()
plt.title("Satellite Orientation")

plt.subplot(3, 1, 2)
plt.plot(solution.t / T_orbit, np.degrees(solution.y[1]), label='Yaw ($\psi$)')
plt.ylabel('Angle (degrees)')
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(solution.t / T_orbit, np.degrees(solution.y[2]), label='Pitch ($\theta$)')
plt.xlabel('Orbit Number')
plt.ylabel('Angle (degrees)')
plt.legend()

plt.tight_layout()
plt.show()
